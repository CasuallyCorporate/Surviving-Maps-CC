/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package uk.co.brett.surviving;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import uk.co.brett.surviving.enums.GameVariant;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

class AppTest {

    @Test
    void test() throws IOException {

        InputFile tf1 = new InputFile("/Trim MapData Evans GP.csv", "e940eef9b9f988200774abf84629d328f44d1d13e39bfea8bbfb8b0de3ad698c");
        InputFile tf2 = new InputFile("/Trim MapData Picard C2 Breakthroughs.csv", "ee9cbed3c221bd7d1b819dbe6ae699a77d53673a4a7403a9d06c20b674d26eb1");
        InputFile tf3 = new InputFile("/Trim MapData Picard C2 Breakthroughs BB.csv", "e843bcede482e16337090533d00785ce55da813bef6330ebf64405d9e2993008");
        InputFile tf4 = new InputFile("/Trim MapData Picard C2 Breakthroughs GP.csv", "bbf7540db687c7e76dd64fc0e0834070ded73cecfec2b6ca11e342ba44bf51ce");
        InputFile tf5 = new InputFile("/Trim MapData Picard C2 Breakthroughs GP BB.csv", "7b0ba45fb9815d163f2f9b3f433bd7ccd31df4c1d9bad84e0a9eb5e2b9d92e08");
        InputFile tf6 = new InputFile("/Trim MapData Tito GP.csv", "2a66951b61ec408972b4def95c2af3fa3bbd37ee700b86fb45744b25aa6ed86c");

        InputFile if1 = new InputFile("/MapData Evans GP.csv", "bf90486492eae116f1defa007480124b90d031696991263378dc4538c7c9b193");
        InputFile if2 = new InputFile("/MapData Picard C2 Breakthroughs.csv", "42f87148d6fe4e7345cb6ae6a1c8a88ddb62d58f47dc91548c198a7444ec887a");
        InputFile if3 = new InputFile("/MapData Picard C2 Breakthroughs BB.csv", "21d91f81211481e1b7f9e4100b29af38423725eb33f2e94fd62c5802e608be8c");
        InputFile if4 = new InputFile("/MapData Picard C2 Breakthroughs GP.csv", "84de320a2c786d6e89890ba7dc71879f30235c40e78cd37f5bd04c222c157372");
        InputFile if5 = new InputFile("/MapData Picard C2 Breakthroughs GP BB.csv", "a2ea616aa3a0bfe3cce70641e61d3d55f734e57a1067590114fa959eeb8a633c");
        InputFile if6 = new InputFile("/MapData Tito GP.csv", "adcb7dee1597a008f73a171ff2310c0b93d66b31a9904a27fbdeb7b1a4936f19");

        Map<GameVariant, InputFile> map = new HashMap<>();
        Map<GameVariant, InputFile> map2 = new HashMap<>();
        map.put(GameVariant.EVANS_GREEN_PLANET, if1);
        map.put(GameVariant.STANDARD, if2);
        map.put(GameVariant.BELOW_BEYOND, if3);
        map.put(GameVariant.GREEN_PLANET, if4);
        map.put(GameVariant.BEYOND_GREEN, if5);
        map.put(GameVariant.TITO_GREEN_PLANET, if6);


        map2.put(GameVariant.EVANS_GREEN_PLANET, tf1);
        map2.put(GameVariant.STANDARD, tf2);
        map2.put(GameVariant.BELOW_BEYOND, tf3);
        map2.put(GameVariant.GREEN_PLANET, tf4);
        map2.put(GameVariant.BEYOND_GREEN, tf5);
        map2.put(GameVariant.TITO_GREEN_PLANET, tf6);


        ObjectMapper mapper = new ObjectMapper();
        System.out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(map2));


    }

    private class InputFile {

        private String resourceLocation;

        private String hash;

        public InputFile(String resourceLocation, String hash) {
            this.resourceLocation = resourceLocation;
            this.hash = hash;
        }

        public String getResourceLocation() {
            return resourceLocation;
        }

        public void setResourceLocation(String resourceLocation) {
            this.resourceLocation = resourceLocation;
        }

        public String getHash() {
            return hash;
        }

        public void setHash(String hash) {
            this.hash = hash;
        }
    }
}
//
//    private static final Logger LOGGER = LogManager.getLogger(AppTest.class);
//    private static final String DATA_FILE = "/Users/Sam/Source/surviving/app/src/main/resources/MapData Picard C2 Breakthroughs GP.csv";
//
//    public static void main(String[] args) {
//        new AppTest().run();
//    }
//
//    private void run() {
//        try {
//            CsvReader reader = new CsvReader();
//            Reader fileReader = new FileReader(new File(DATA_FILE));
//            List<LandingSite> sites = new ArrayList<>(reader.read(fileReader, ImmutableLandingSite.class));
//            complexFilter(sites);
//        } catch (IOException e) {
//            LOGGER.info("Error reading file");
//            LOGGER.info(e.getMessage());
//        }
//    }
//
//    private void complexFilter(List<LandingSite> sites) {
//
//        ComplexSiteFilter complexSiteFilter = new ComplexSiteFilter(sites);
//
//        List<Breakthrough> breakthroughs = List.of(Breakthrough.EXTRACTOR_AI, Breakthrough.FOREVER_YOUNG, Breakthrough.SUPERIOR_PIPES, Breakthrough.SUPERCONDUCTING_COMPUTING);
//
//        Map<ResourceType, Predicate<Rating>> resourcePredicates = new EnumMap<>(ResourceType.class);
//        resourcePredicates.put(ResourceType.METAL, Rating.atLeast(Rating.VERY_HIGH));
//        resourcePredicates.put(ResourceType.WATER, Rating.atLeast(Rating.HIGH));
//        resourcePredicates.put(ResourceType.CONCRETE, Rating.atLeast(Rating.MEDIUM));
//
//        Map<DisasterType, Predicate<Rating>> disasterPredicates = new EnumMap<>(DisasterType.class);
//
//        Predicate<Topography> topographyPredicate = Topography.atMost(Topography.STEEP);
//        List<NamedLandingArea> nlas = List.of(NamedLandingArea.OPPORTUNITY_LANDING_AREA, NamedLandingArea.ARABIA_TERRA);
//        Predicate<NamedLandingArea> nlaPredicate = nlas::contains;
//
//
//        List<LandingSite> l = complexSiteFilter.filter(resourcePredicates, disasterPredicates, topographyPredicate, nlaPredicate, breakthroughs);
//
//        LOGGER.info("l = {}", l.size());
//
//        l.forEach(LOGGER::info);
//    }
//
//    public void simpleFilter(List<LandingSite> sites) {
//        SimpleSiteStatistics stats = new SimpleSiteStatistics(sites);
//
//        Map<Class<?>, Predicate<Prevalence>> predicates = new HashMap<>();
//        List<Breakthrough> breakthroughs = List.of(Breakthrough.EXTRACTOR_AI, Breakthrough.THE_POSITRONIC_BRAIN);
//
//        predicates.put(Disasters.class, atLeast(MED));
//        predicates.put(MapDetails.class, atMost(LOW));
//
//        SimpleSiteFilter simpleFilter = new SimpleSiteFilter(sites, stats);
//
//        List<LandingSite> aa = simpleFilter.filter(predicates, breakthroughs);
//
//        LOGGER.info("size: {}", aa.size());
//        aa.forEach(LOGGER::info);
//    }
//}
