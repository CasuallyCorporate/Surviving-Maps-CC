buildscript {
    ext {
        springBootVersion = '2.6.7'
    }
}
plugins {
    id "org.sonarqube" version "3.3"
    id 'org.springframework.boot' version '2.6.7'
}
apply plugin: "application"
apply plugin: 'jacoco'
apply plugin: "java"
apply plugin: "war"
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'

project.version = "0.6"

repositories {
    mavenCentral()
}

dependencies {

    annotationProcessor("com.querydsl:querydsl-apt:5.0.0:jpa",
            "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final",
            "javax.annotation:javax.annotation-api:1.3.2", 'org.immutables:value:2.9.2')
    implementation 'org.immutables:value-annotations:2.9.2'
    implementation 'org.immutables:gson:2.9.2'

    implementation 'org.apache.commons:commons-csv:1.9.0'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'org.apache.commons:commons-text:1.10.0'

    implementation 'com.querydsl:querydsl-core:5.0.0'
    implementation 'com.querydsl:querydsl-jpa:5.0.0'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: '2.7.0'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.14.0'
    implementation 'org.assertj:assertj-core:3.23.1'
    implementation 'com.google.guava:guava:31.1-jre'

    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'org.javassist:javassist:3.29.2-GA'


    implementation 'com.h2database:h2:2.1.214'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-guava:2.14.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.14.0'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'


    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.2'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.2'

    testAnnotationProcessor("com.querydsl:querydsl-apt:5.0.0:jpa",
            "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final",
            "javax.annotation:javax.annotation-api:1.3.2", 'org.immutables:value:2.9.2')
    testImplementation 'org.immutables:value-annotations:2.9.2'
    testImplementation 'org.immutables:gson:2.9.2'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    implementation 'commons-io:commons-io:2.11.0'
    implementation 'commons-codec:commons-codec:1.15'


}


configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

application {
    mainClass = 'uk.co.brett.surviving.SpringApplication'
}

jacoco {
    toolVersion = '0.8.8'
}
jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.getByName("sonarqube").mustRunAfter("jacocoTestReport")
tasks.getByName("sonarqube").dependsOn(tasks.getByName("jacocoTestReport"))

sonarqube {
    properties {
        property "sonar.sources", "src/main/java,src/main/resources"
    }
}

test {
    ignoreFailures = true
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jar {
    manifest {
        attributes(
                'Main-Class': 'uk.co.brett.surviving.SpringApplication'
        )
    }
}
war {
    classpath = classpath - sourceSets.main.output
    from(jar) {
        into 'WEB-INF/lib'
    }
}